<?php
    // мета символы в регулярных выражениях (\d цыфра от 0 до 9, \s пробел, \n переход на новую строку)

    $reg = '/a . b/'; // . это мета символ, он соответствует одному любому символу (если хотим просто обычную точку то экранируем её \.)
    $str = 'a b b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/^ab/'; // ^ это мета символ, он соответствует началу строки
    $str = 'ab b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/ab$/'; // $ это мета символ, он соответствует концу строки
    $str = 'aab';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a [a-z][0-5] b/'; // [-] это мета символ, он соответствует одному символу из заданного интервала
    $str = 'a c4 b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a [^a-z] b/'; // [^-] это мета символ, он соответствует символу не из указанного интервала
    $str = 'a 4 b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a ([a-z]a\d) (b)/'; // () это НЕ мета символ, это результирующие скобки (карманы), позволяют группировать мета символы. 
    $str = 'a aa5 b';
    echo preg_match($reg, $str, $matches).'<br/>'; // в массив попадают все соответствия рег. выр. всё что в  () считается отдельным выражением
    print_r($matches);
    echo '<br/>';

    //квантификаторы повторений

    $reg = '/a ([a-z]a)* b$/'; // * квантификатор, означает что символ или выражение в () может повторяться от 0 до бесконечности раз
    $str = 'a zaca b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a ([a-z]a)+ b$/'; // + квантификатор, означает что символ или выражение в () может повторяться от 1 до бесконечности раз
    $str = 'a zaca b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a ([a-z]a)? b$/'; // ? квантификатор, означает что символ или выражение в () может повторяться от 0 до 1 раз
    $str = 'a za b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a (addd\d){5} b$/'; // {} квантификатор, означает что символ или выражение в () должно повторяться ровно столько раз сколько указанно в {число}
    $str = 'a addd5addd5addd5addd5addd5 b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a (addd\d){3,} b$/'; // {число,} квантификатор, означает что символ или выражение в () должно повторяться от {число} до бесконечности раз
    $str = 'a addd5addd5addd5addd5addd5 b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a (addd\d){3,5} b$/'; // {число,число} квантификатор, означает что символ или выражение в () должно повторяться от 3 до 5 раз
    $str = 'a addd5addd5addd5addd5addd5 b';
    echo preg_match($reg, $str).'<br/>';

    // Модификаторы, задаются после закрывающего рег.выр. символа (можно совмещать несколько сразу)

    $reg = '/a \d{3,5} b$/i'; // i модификатор, означает что рег.выр. игнорирует регистр
    $str = 'A 256 b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/a     \d{3,5}    b$/ix'; // i модификатор, игнорирует пробелы в  рег.выр. 
    $str = 'A256b';
    echo preg_match($reg, $str).'<br/>';

    $reg = '/ab$/m'; // m модификатор, с ним учитывается переход на новую строку \n
    $str = "ab\ndddd";
    echo preg_match($reg, $str).'<br/>';

    // "Жадность" квантификатора

    $reg = '/".*"/m'; // такая запись записывает в массив всё что находится внутри первых "", эт ои есть жадность модификатора
    $str = 'abc "23" abc "45"';
    echo preg_match($reg, $str, $matches).'<br/>';
    print_r($matches);
    echo '<br/>';

    $reg = '/".*?"/m'; // такая запись записывает в массив всё что находится внутри всех ""
    $str = 'abc "23" abc "45"';
    echo preg_match_all($reg, $str, $matches).'<br/>'; // так же возвращает количество найденных совпадений
    print_r($matches);
    echo '<br/>';
?>