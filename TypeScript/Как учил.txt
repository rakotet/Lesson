1) NVM утилита для использования разных версий NodeJs (устанавить нужную версию команда nvm install 14(или нужная нам версия), переключить версию nvm use 15(или нужная нам версия))

2) Устанавливаем TS глобально (для использование везде) npm i -g typescript

3) Делее для работы с TS необходимо в директории проекта создать конфиг для TS tsc --init (делаем это в консоле от администратора)

4) Команда tsc компилирует файл .ts в файл .NodeJs

5) Типы данных в TS есть Number, String, Boolean как в js. В TS типы можно задавать явно, типы записываются через : после имени переменной. Есть тип : any (любой тип), но его использовать не рекомендуется в TS, в tsconfig.json можно включить тип any по умолчанию для не заданных типов, но так делать тоже не стоит.
Лучше всегда явно указывать тип котоырй возвращает функция (стрелочная или обычная).
Делать проверку на типы typeof в TS нужно толкьо в том случае если данные приходят откуда то из вне и не известен тип этих приходящих данных.
Можно и нужно типизирвоать объекты которые принимает функция : {}, можно передавать объекты с большем количеством ключей чем мы описали в принимаемом типе.
Можно созвавать свои объектные типы let test: {ключ: тип,}.
const skills: string[] = ['Dev', 'DevOps'] в такой массив можно передавать только строки т.к. мы явно указали тип массива. Если в массиве будут любые значения то можно поставить тип : any[], но это плохое решение т.к. any использовать вообще не стоит.

6) const skills: [number, string] = [1, 'Dev'] тип табл это массив ограниченной длины который типизирован

7) Доп типы Ts: Tuples - массивы с заданной нами типизацией, Enums - перечисление (внутри это функция а не объект, хоть и обладает свойствами объекта), используется для создания справочников ка бы констант

8) Сложные типы Union - 