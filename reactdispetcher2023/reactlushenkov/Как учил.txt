Unit1 Запуск реакт
1) Установить nodeJS и npm и проверить что устанволен: node -v, npm -v
2) Открыть терминал в папке проэкта, ввести команду: npx create-react-app название проэкта
3) Запуск проэкта npm start (команды в файле package.json)
4) Все компаненты должны возвращать один элемент (к примеру <div></div> или можно обернуть в <></> так тоже будет работать)
5) На React css пишется в КамелКейсе, классы пишутся не class="" а className=""
6) И название css классов должны начинаться в имени компанента в котором он используется, так не будет путаницы с названиями css
7) В JSX style пишется через объект: style={{color: 'red', fontFamily: 'Georgia'}}

Unit2 Создание компанентов
1) Создадим свои компаненты классовый TestClass.js и функциональный TestFunc.js и очистим от стандартной верстки компанент App.js, добавим один компанент в другой.
2) Создадим папку Header для хранения компанентов для headera
3) Что бы html теги дописывались течез tab в jsx нужно в vs code нажать ctr + , Emmet -> idd item -> "javascript" "javascriptreact"
4) props в React только для чтения!!! Одна из основных концепций чистых ф-й
5) Создадим компанент Googs.js

Unit3 Роутинг
1) Для роутинга ставим зависимость npm i react-router-dom
2) Создаём компаненты
3) Импартируем роутер
4) За маршрутизацию отвечает компанент Router

Unit4 События и функции в React
1) Создаём новый проект и компаненты
2) События прописываются внутри элементов (блоков) JSX
3) В переданной ф-и на событие можно передавать аргументы через стрелочную ф-ю 

Unit5 State 
1) Используем хук useState, в документации читать, там есть всё

Unit6 Жизненный цикл компанента
1) Пропсы можно передавать в state const [s1, setS1] = useState(props.arg)
2) В нвоой документации используются только хуки useEffect вместо классовых компанентов и их ф-й для отслеживания состояния компанентов

Unit7 Refs & DOM
1) Refs нарушают логику реакта т.к. логика реакта когда даныне идут сверху вниз!
2) Refs могут привязываться к классовым компанентам и вызывать его внутренние методы и свойства, но с некоторыми ограничениями

Unit8 Создание элементов в React
1) Создавать элементы в реакт в основном не требуется, лучше пользоваться просто JSX 
2) <></> оказывается аналогично <React.Fragment></React.Fragment>
3) Можно создавать так же вложеныне элементы 

Unit9 Хуки
1) Хуки это ф-и которые позволяют изменить стандартное течение нашей программы.


Unit10 10. Redux и redux toolkit (1 часть)
1) Redux это хранилище данных для наших определенных компанентов которые смогут в это хранилище записывать данные и считывать даныне из него.
2) Использование Redux не отменяет использование props и state в этом же приложении 
3) Для начала нужно сконфигурировать хранилище Redux, но для начала установить пакеты redux и toolkit redux (npm i react-redux, npm i @reduxjs/toolkit)
4) Импортируем и подключаем наше Redux хранилище и Redux provider в index.js (главный файл - начало приложения React) 
5) App/store.js наже хранилище в нем импартируется пакеты redux
6) Redux хранилище позволяет обмениватсья данными между компанентами и рендерить компаненты после изменения данных в хранилище
7) 
8) 

Unit11 11. Redux - store, reducers, action (2 часть) Подход Redux без toolkit
1) Установить redux
2) В папке store настройки хранилища, в других структура приложения
 

Unit12 Redux, выводим товары магазина (3 часть)
1) 

Unit13
1) 
2) 
3) 
4) 
5) 

Unit14
1) 
2) 
3) 
4) 
5) 